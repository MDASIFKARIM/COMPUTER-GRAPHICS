--------------------Project-3-Airport----------------------------------
----------------------------code---------------------------------------


#include <windows.h>
#include <mmsystem.h>
#include <GL/glut.h>
#include <stdio.h>
#include <GL/gl.h>
#include <math.h>

float r = 10.0;
float f = 70.0;
float t = 0.0005;
float c = 90.0;
float c2 = 90.0;
float mp = 830;
float v = 880;

void init(void)
{
    glClearColor(0.0, 0.0, 0.0, 0.0); //GLfloat red,green,blue,alpha initial value 0 alpha values used by glclear to clear the color buffers
    glMatrixMode(GL_PROJECTION);  // To specify which matrix is the current matrix & projection applies subsequent matrix to projecton matrix stack
    glLoadIdentity();
    glOrtho(0.0, 1000.0, 0.0, 500.0, -1.0, 1.0); // Left, Right, Bottom, Top, Near, Far
    // glOrtho(0.0, 100.0, 0.0, 50.0, -1.0, 1.0); // Left, Right, Bottom, Top, Near, Far
    //gluOrtho2D(0.0,300.0,0.0,300.0); // Left, Right, Bottom, Top, Near, Far
}
float rgb(float rgb)
{
    float x = rgb / 255;
    return floorf(x * 100) / 100;

}
void DrawMixedCloud(float x, float y);

void Draw()

{
    // moving objects-----------------
    if (r <= 1000)
    {
        r = r + 0.07;
        f = f + t;
        t = t + 0.000003;

        // r = r + 0.5;
        // f = f + t;
        // t = t + 0.0001;
        // p = p + 0.001;
    }
    else {
        r = -200;
        f = 70;
        t = 0.0005;


    }
    if (c <= 1000)
    {
        // c = c + 0.1; //clode
        c = c + 0.09;
    }
    else {
        c = -50;
    }
    if (c2 <= 1000)
    {
        // c2 = c2 + 0.1;
        c2 = c2 + 0.01;
    }
    else {
        c2 = -500;
    }
    if (mp >= -1000)
    {
        // c2 = c2 + 0.1;
        mp = mp - 0.9;//plain speed
    }
    else {
        mp = 2000;
    }
    if (v >= -100)
    {
        // c2 = c2 + 0.1;
        v = v - 1.0;// car speed
    }
    else {
        v = 2000;
    }  // Update mini plane 1






    glutPostRedisplay();

    // ===================================
    glClear(GL_COLOR_BUFFER_BIT);


    // drawing sky==================================================
    glBegin(GL_POLYGON);
    glColor3f(rgb(228), rgb(247), rgb(254));
    glVertex2i(0, 100);
    glVertex2i(1000, 100);

    glColor3f(rgb(47), rgb(199), rgb(236));
    glVertex2i(1000, 500);
    glVertex2i(0, 500);
    glEnd();


 //building

    //red border
    glBegin(GL_QUADS);
    glColor3f(1.0, 0.0, 0.0);
    glVertex2f(0.0, 100.0);
    glVertex2f(1000.0, 100.0);
    glVertex2f(1000.0, 116.0);
    glVertex2f(0.0, 116.0);
    glEnd();
    glFlush();



    //1st siri
    glBegin(GL_QUADS);
    glColor3f(rgb(109), rgb(137), rgb(144));
    glVertex2f(115.0,116.0 );
    glVertex2f(485.0,116.0 );
    glVertex2f(485.0,125.0 );
    glVertex2f(115.0,125.0 );
    glEnd();
    glFlush();

    //1st siri black part
    glBegin(GL_QUADS);
    glColor3f(0.0, 0.0, 0.0);
    glVertex2f(115.0,125.0 );
    glVertex2f(485.0,125.0 );
    glVertex2f(485.0,128.0 );
    glVertex2f(115.0,128.0 );
    glEnd();
    glFlush();

    //2nd siri
    glBegin(GL_QUADS);
    glColor3f(rgb(109), rgb(137), rgb(144));
    glVertex2f(130.0,128.0 );
    glVertex2f(470.0,128.0 );
    glVertex2f(470.0,138.0 );
    glVertex2f(130.0,138.0 );
    glEnd();
    glFlush();

    //2nd siri black part
    glBegin(GL_QUADS);
    glColor3f(0.0, 0.0, 0.0);
    glVertex2f(130.0,138.0 );
    glVertex2f(470.0,138.0 );
    glVertex2f(470.0,141.0 );
    glVertex2f(130.0,141.0 );
    glEnd();
    glFlush();

    //upore black bord
    glBegin(GL_QUADS);
    glColor3f(rgb(211), rgb(157), rgb(61));
    glVertex2f(100.0,220.0 );
    glVertex2f(500.0,220.0 );
    glVertex2f(500.0,225.0 );
    glVertex2f(100.0,225.0 );
    glEnd();
    glFlush();

    //upore boro border
    glBegin(GL_QUADS);
    glColor3f(rgb(109), rgb(137), rgb(144));
    glVertex2f(100.0,225.0 );
    glVertex2f(500.0,225.0 );
    glVertex2f(500.0,245.0 );
    glVertex2f(100.0,245.0 );
    glEnd();
    glFlush();

    //Terminal-1 text
    glColor3f (0.0, 0.0, 0.0);
        glRasterPos2f(277, 232); //define position on the screen
        char *string = "Terminal-1";

      while(*string){
        glutBitmapCharacter(GLUT_BITMAP_9_BY_15, *string++);
      }
      glEnd();

      //Hazrat Shahjalal International Airport, Dhaka-> text

      glColor3f (0.0, 0.0, 0.0);
        glRasterPos2f(190, 250); //define position on the screen
        char *text = "Hazrat Shahjalal International Airport, Dhaka.";

      while(*text){
        glutBitmapCharacter(GLUT_BITMAP_9_BY_15, *text++);
      }
      glEnd();








    //glass
    glBegin(GL_QUADS);
    glColor3f(rgb(128), rgb(184), rgb(218));
    glVertex2f(130.0,141.0 );
    glVertex2f(470.0,141.0 );
    glVertex2f(470.0,220.0 );
    glVertex2f(130.0,220.0 );
    glEnd();
    glFlush();

    //1st pilar upore part
    glBegin(GL_TRIANGLES);
    glColor3f(1.0, 1.0, 1.0);
    glVertex2f(165.0,180.0 );
    glVertex2f(175.0,220.0 );
    glVertex2f(155.0,220.0 );
    glEnd();
    glFlush();

    //1st pilar nicher pilat
    glBegin(GL_QUADS);
    glColor3f(1.0, 1.0, 1.0);
    glVertex2f(160.0,141.0 );
    glVertex2f(170.0,141.0 );
    glVertex2f(170.0,215.0 );
    glVertex2f(160.0,215.0 );
    glEnd();
    glFlush();



    //3rd pilar upore part
    glBegin(GL_TRIANGLES);
    glColor3f(1.0, 1.0, 1.0);
    glVertex2f(435.0,180.0 );
    glVertex2f(445.0,220.0 );
    glVertex2f(425.0,220.0 );
    glEnd();
    glFlush();

    //3rd pilar nicher part
    glBegin(GL_QUADS);
    glColor3f(1.0, 1.0, 1.0);
    glVertex2f(430.0,141.0 );
    glVertex2f(440.0,141.0 );
    glVertex2f(440.0,215.0 );
    glVertex2f(430.0,215.0 );
    glEnd();
    glFlush();

    //2nd pilar nicher part
    glBegin(GL_QUADS);
    glColor3f(1.0, 1.0, 1.0);
    glVertex2f(300.0,141.0 );
    glVertex2f(310.0,141.0 );
    glVertex2f(310.0,215.0 );
    glVertex2f(300.0,215.0 );
    glEnd();
    glFlush();


    //3rd pilar upore part
    glBegin(GL_TRIANGLES);
    glColor3f(1.0, 1.0, 1.0);
    glVertex2f(305.0,180.0 );
    glVertex2f(315.0,220.0 );
    glVertex2f(295.0,220.0 );
    glEnd();
    glFlush();


    // drawing building
        glBegin(GL_POLYGON);
        glColor3f(rgb(103), rgb(202), rgb(221));
        glVertex2i(800, 250);
        glVertex2i(850, 250);
        glVertex2i(850, 270);
        glVertex2i(800, 270);
        glEnd();

        glBegin(GL_POLYGON);
        glColor3f(rgb(175), rgb(201), rgb(213));
        glVertex2i(800, 270);
        glVertex2i(850, 270);
        glVertex2i(850, 280);
        glVertex2i(800, 280);
        glEnd();

        glBegin(GL_POLYGON);
        glColor3f(rgb(109), rgb(137), rgb(144));
        glVertex2i(550, 250);
        glVertex2i(870, 230);
        glVertex2i(870, 250);
        glVertex2i(550, 270);
        glEnd();

        glBegin(GL_POLYGON);
        glColor3f(rgb(175), rgb(182), rgb(184));
        glVertex2i(650, 180);
        glVertex2i(850, 230);
        glVertex2i(550, 250);
        glEnd();

        glBegin(GL_POLYGON);
        glColor3f(rgb(211), rgb(157), rgb(61));
        glVertex2i(650, 220);
        glVertex2i(850, 220);
        glVertex2i(850, 230);
        glVertex2i(650, 230);
        glEnd();

        glBegin(GL_POLYGON);
        glColor3f(rgb(128), rgb(184), rgb(218));//
        glVertex2i(650, 100);
        glVertex2i(850, 100);
        glVertex2i(850, 220);
        glVertex2i(650, 220);
        glEnd();

        glBegin(GL_POLYGON);
        glColor3f(rgb(220), rgb(242), rgb(247));
        glVertex2i(670, 110);
        glVertex2i(740, 110);
        glVertex2i(740, 200);
        glVertex2i(670, 200);
        glEnd();

        glBegin(GL_POLYGON);
        glColor3f(rgb(220), rgb(242), rgb(247));//
        glVertex2i(760, 110);
        glVertex2i(830, 110);
        glVertex2i(830, 200);
        glVertex2i(760, 200);
        glEnd();

        // glass window---------------------------------------
        glBegin(GL_POLYGON);
        glColor3f(rgb(143), rgb(198), rgb(218));
        glVertex2i(680, 120);
        glVertex2i(700, 120);
        glVertex2i(700, 130);
        glVertex2i(680, 130);
        glEnd();
        glBegin(GL_POLYGON);
        glColor3f(rgb(143), rgb(198), rgb(218));
        glVertex2i(680, 140);
        glVertex2i(700, 140);
        glVertex2i(700, 150);
        glVertex2i(680, 150);
        glEnd();
        glBegin(GL_POLYGON);
        glColor3f(rgb(143), rgb(198), rgb(218));
        glVertex2i(680, 160);
        glVertex2i(700, 160);
        glVertex2i(700, 170);
        glVertex2i(680, 170);
        glEnd();
        glBegin(GL_POLYGON);
        glColor3f(rgb(143), rgb(198), rgb(218));
        glVertex2i(680, 180);
        glVertex2i(700, 180);
        glVertex2i(700, 190);
        glVertex2i(680, 190);
        glEnd();


        glBegin(GL_POLYGON);
        glColor3f(rgb(143), rgb(198), rgb(218));
        glVertex2i(710, 120);
        glVertex2i(730, 120);
        glVertex2i(730, 130);
        glVertex2i(710, 130);
        glEnd();
        glBegin(GL_POLYGON);
        glColor3f(rgb(143), rgb(198), rgb(218));
        glVertex2i(710, 140);
        glVertex2i(730, 140);
        glVertex2i(730, 150);
        glVertex2i(710, 150);
        glEnd();
        glBegin(GL_POLYGON);
        glColor3f(rgb(143), rgb(198), rgb(218));
        glVertex2i(710, 160);
        glVertex2i(730, 160);
        glVertex2i(730, 170);
        glVertex2i(710, 170);
        glEnd();
        glBegin(GL_POLYGON);
        glColor3f(rgb(143), rgb(198), rgb(218));
        glVertex2i(710, 180);
        glVertex2i(730, 180);
        glVertex2i(730, 190);
        glVertex2i(710, 190);
        glEnd();

        // 2nd part glass window
        glBegin(GL_POLYGON);
        glColor3f(rgb(143), rgb(198), rgb(218));
        glVertex2i(770, 120);
        glVertex2i(790, 120);
        glVertex2i(790, 130);
        glVertex2i(770, 130);
        glEnd();
        glBegin(GL_POLYGON);
        glColor3f(rgb(143), rgb(198), rgb(218));
        glVertex2i(770, 140);
        glVertex2i(790, 140);
        glVertex2i(790, 150);
        glVertex2i(770, 150);
        glEnd();
        glBegin(GL_POLYGON);
        glColor3f(rgb(143), rgb(198), rgb(218));
        glVertex2i(770, 160);
        glVertex2i(790, 160);
        glVertex2i(790, 170);
        glVertex2i(770, 170);
        glEnd();
        glBegin(GL_POLYGON);
        glColor3f(rgb(143), rgb(198), rgb(218));
        glVertex2i(770, 180);
        glVertex2i(790, 180);
        glVertex2i(790, 190);
        glVertex2i(770, 190);
        glEnd();
        // --------------
        glBegin(GL_POLYGON);
        glColor3f(rgb(143), rgb(198), rgb(218));
        glVertex2i(800, 120);
        glVertex2i(820, 120);
        glVertex2i(820, 130);
        glVertex2i(800, 130);
        glEnd();
        glBegin(GL_POLYGON);
        glColor3f(rgb(143), rgb(198), rgb(218));
        glVertex2i(800, 140);
        glVertex2i(820, 140);
        glVertex2i(820, 150);
        glVertex2i(800, 150);
        glEnd();
        glBegin(GL_POLYGON);
        glColor3f(rgb(143), rgb(198), rgb(218));
        glVertex2i(800, 160);
        glVertex2i(820, 160);
        glVertex2i(820, 170);
        glVertex2i(800, 170);
        glEnd();
        glBegin(GL_POLYGON);
        glColor3f(rgb(143), rgb(198), rgb(218));
        glVertex2i(800, 180);
        glVertex2i(820, 180);
        glVertex2i(820, 190);
        glVertex2i(800, 190);
        glEnd();

        // border
        glBegin(GL_QUADS);
        glColor3f(1.0, 0.0, 0.0);
        glVertex2f(0.0, 100.0);
        glVertex2f(1000.0, 100.0);
        glVertex2f(1000.0, 116.0);
        glVertex2f(0.0, 116.0);
        glEnd();
        glFlush();

        // signbord
        glBegin(GL_POLYGON);
        glColor3f(rgb(143), rgb(198), rgb(218));
        glVertex2i(570, 290);
        glVertex2i(680, 290);
        glVertex2i(680, 320);
        glVertex2i(570, 320);
        glEnd();

        // signboad line
       glLineWidth(5);
       glBegin(GL_LINES);
       glColor3f(rgb(43), rgb(43), rgb(48));
       glVertex2f(580, 290);
       glVertex2f(580, 270);
       glEnd();
       glLineWidth(5);
       glBegin(GL_LINES);
       glColor3f(rgb(43), rgb(43), rgb(48));
       glVertex2f(670, 260);
       glVertex2f(670, 290);
       glEnd();
        glLineWidth(3);
        glBegin(GL_LINES);
        glColor3f(rgb(43), rgb(43), rgb(48));
        glVertex2f(580, 310);
        glVertex2f(610, 310);
        glEnd();
        glLineWidth(3);
        glBegin(GL_LINES);
        glColor3f(rgb(43), rgb(43), rgb(48));
        glVertex2f(620, 310);
        glVertex2f(640, 310);
        glEnd();
        glLineWidth(3);
        glBegin(GL_LINES);
        glColor3f(rgb(43), rgb(43), rgb(48));
        glVertex2f(580, 300);
        glVertex2f(630, 300);
        glEnd();
        glLineWidth(3);
        glBegin(GL_LINES);
        glColor3f(rgb(43), rgb(43), rgb(48));
        glVertex2f(640, 300);
        glVertex2f(660, 300);
        glEnd();

        //building siri
        glBegin(GL_QUADS);
        glColor3f(0.0, 0.0, 0.0);
        glVertex2f(485.0, 116.0);
        glVertex2f(650.0, 116.0);
        glVertex2f(650.0, 128.0);
        glVertex2f(485.0, 128.0);
        glEnd();
        glFlush();



    // ===================================
    // Drawing clouds
    // ===================================
   // ===================================
    // Drawing clouds with mixed circles
    // ===================================
    // First Cloud
    DrawMixedCloud(c, 400);

    // Second Cloud
    DrawMixedCloud(c + 150, 420);

    // Third Cloud
    DrawMixedCloud(c + 300, 400);

    // Additional Clouds
    DrawMixedCloud(c + 500, 450);
    DrawMixedCloud(c + 650, 430);

    // ===================================
    // Drawing mini clouds
    // ===================================
    // First Mini Cloud
    DrawMixedCloud(c2 + 530, 470);

    // Second Mini Cloud
    DrawMixedCloud(c2 + 680, 490);



    // ======================================
    // || mini Plane ||
    // ======================================
    // tail
    glBegin(GL_POLYGON);
    glColor3f(rgb(35), rgb(50), rgb(64));
    glVertex2i(mp + 70, 440);
    glVertex2i(mp + 100, 440);
    glVertex2i(mp + 100, 460);
    glVertex2i(mp + 90, 450);
    glVertex2i(mp + 80, 450);
    glVertex2i(mp + 80, 450);
    glEnd();
    // body
    glBegin(GL_POLYGON);
    glColor3f(rgb(65), rgb(86), rgb(111));
    glVertex2i(mp, 420);
    glVertex2i(mp + 80, 420);
    glVertex2i(mp + 100, 440);
    glVertex2i(mp + 30, 440);
    glVertex2i(mp + 30, 430);
    glVertex2i(mp + 10, 430);
    glEnd();
    // cokepit
    glBegin(GL_POLYGON);
    glColor3f(rgb(166), rgb(214), rgb(252));
    glVertex2i(mp + 20, 430);
    glVertex2i(mp + 30, 430);
    glVertex2i(mp + 30, 440);
    glEnd();
    // backline
    glLineWidth(8);
    glBegin(GL_LINES);
    glColor3f(rgb(166), rgb(214), rgb(252));
    glVertex2f(mp + 80, 440);
    glVertex2f(mp + 110, 440);
    glEnd();
    // fan
    glBegin(GL_POLYGON);
    glColor3f(rgb(35), rgb(50), rgb(64));
    glVertex2i(mp + 40, 410);
    glVertex2i(mp + 60, 410);
    glVertex2i(mp + 70, 420);
    glVertex2i(mp + 60, 430);
    glVertex2i(mp + 40, 430);
    glEnd();

// ======================================
// || mini Plane 2 ||
// ======================================
// tail
glBegin(GL_POLYGON);
glColor3f(rgb(35), rgb(50), rgb(64));
glVertex2i(-mp - 70, 390);  // Adjusted y-coordinate to avoid collision
glVertex2i(-mp - 100, 390);
glVertex2i(-mp - 100, 410);
glVertex2i(-mp - 90, 400);
glVertex2i(-mp - 80, 400);
glVertex2i(-mp - 80, 400);
glEnd();
// body
glBegin(GL_POLYGON);
glColor3f(rgb(65), rgb(86), rgb(111));
glVertex2i(-mp, 370);
glVertex2i(-mp - 80, 370);
glVertex2i(-mp - 100, 390);
glVertex2i(-mp - 30, 390);
glVertex2i(-mp - 30, 380);
glVertex2i(-mp - 10, 380);
glEnd();
// cokepit
glBegin(GL_POLYGON);
glColor3f(rgb(166), rgb(214), rgb(252));
glVertex2i(-mp - 20, 380);
glVertex2i(-mp - 30, 380);
glVertex2i(-mp - 30, 390);
glEnd();
// backline
glLineWidth(8);
glBegin(GL_LINES);
glColor3f(rgb(166), rgb(214), rgb(252));
glVertex2f(-mp - 80, 390);
glVertex2f(-mp - 110, 390);
glEnd();
// fan
glBegin(GL_POLYGON);
glColor3f(rgb(35), rgb(50), rgb(64));
glVertex2i(-mp - 40, 360);
glVertex2i(-mp - 60, 360);
glVertex2i(-mp - 70, 370);
glVertex2i(-mp - 60, 380);
glVertex2i(-mp - 40, 380);
glEnd();
















    // =====================================
    // drawing tower
    // =====================================

    // ================================
    // drawing runway
    // ================================
    glLineWidth(7);
    glBegin(GL_LINES);
    glColor3f(1, 1, 1);
    glVertex2f(0, 50);
    glVertex2f(50, 50);
    glEnd();
    glLineWidth(7);
    glBegin(GL_LINES);
    glColor3f(1, 1, 1);
    glVertex2f(100, 50);
    glVertex2f(150, 50);
    glEnd();
    glLineWidth(7);
    glBegin(GL_LINES);
    glColor3f(1, 1, 1);
    glVertex2f(200, 50);
    glVertex2f(250, 50);
    glEnd();
    glLineWidth(7);
    glBegin(GL_LINES);
    glColor3f(1, 1, 1);
    glVertex2f(300, 50);
    glVertex2f(350, 50);
    glEnd();
    glLineWidth(7);
    glBegin(GL_LINES);
    glColor3f(1, 1, 1);
    glVertex2f(400, 50);
    glVertex2f(450, 50);
    glEnd();
    glLineWidth(7);
    glBegin(GL_LINES);
    glColor3f(1, 1, 1);
    glVertex2f(500, 50);
    glVertex2f(550, 50);
    glEnd();
    glLineWidth(7);
    glBegin(GL_LINES);
    glColor3f(1, 1, 1);
    glVertex2f(600, 50);
    glVertex2f(650, 50);
    glEnd();
    glLineWidth(7);
    glBegin(GL_LINES);
    glColor3f(1, 1, 1);
    glVertex2f(700, 50);
    glVertex2f(750, 50);
    glEnd();
    glLineWidth(7);
    glBegin(GL_LINES);
    glColor3f(1, 1, 1);
    glVertex2f(800, 50);
    glVertex2f(850, 50);
    glEnd();
    glLineWidth(7);
    glBegin(GL_LINES);
    glColor3f(1, 1, 1);
    glVertex2f(900, 50);
    glVertex2f(950, 50);
    glEnd();

    // ================================
    // drawing runway light
    // ================================

glBegin(GL_POLYGON);
    glColor3f(rgb(255), rgb(236), rgb(39));
    glVertex2i(70, 100);
    glVertex2i(90, 100);
    glVertex2i(90, 110);
    glVertex2i(70, 110);
    glEnd();
    glBegin(GL_POLYGON);
    glColor3f(rgb(255), rgb(236), rgb(39));
    glVertex2i(170, 100);
    glVertex2i(190, 100);
    glVertex2i(190, 110);
    glVertex2i(170, 110);
    glEnd();
    glBegin(GL_POLYGON);
    glColor3f(rgb(255), rgb(236), rgb(39));
    glVertex2i(270, 100);
    glVertex2i(290, 100);
    glVertex2i(290, 110);
    glVertex2i(270, 110);
    glEnd();
    glBegin(GL_POLYGON);
    glColor3f(rgb(255), rgb(236), rgb(39));
    glVertex2i(370, 100);
    glVertex2i(390, 100);
    glVertex2i(390, 110);
    glVertex2i(370, 110);
    glEnd();
    glBegin(GL_POLYGON);
    glColor3f(rgb(255), rgb(236), rgb(39));
    glVertex2i(890, 100);
    glVertex2i(910, 100);
    glVertex2i(910, 110);
    glVertex2i(890, 110);
    glEnd();
    glBegin(GL_POLYGON);
    glColor3f(rgb(255), rgb(236), rgb(39));
    glVertex2i(950, 100);
    glVertex2i(970, 100);
    glVertex2i(970, 110);
    glVertex2i(950, 110);
    glEnd();

    // vehicle-----------------------------
    // ====================================
    // driver
    glBegin(GL_POLYGON);
    glColor3f(rgb(142), rgb(197), rgb(217));
    glVertex2i(v, 110);
    glVertex2i(v + 20, 110);
    glVertex2i(v + 20, 130);
    glEnd();
    // carback
    glBegin(GL_POLYGON);
    glColor3f(rgb(110), rgb(140), rgb(146));
    glVertex2i(v + 20, 110);
    glVertex2i(v + 40, 110);
    glVertex2i(v + 40, 120);
    glVertex2i(v + 20, 120);
    glEnd();
    // driver seat up
    glBegin(GL_POLYGON);
    glColor3f(rgb(213), rgb(158), rgb(61));
    glVertex2i(v, 130);
    glVertex2i(v + 20, 130);
    glVertex2i(v + 20, 140);
    glVertex2i(v, 140);
    glEnd();
    // car stear
    glBegin(GL_POLYGON);
    glColor3f(rgb(213), rgb(158), rgb(61));
    glVertex2i(v + 50, 110);
    glVertex2i(v + 60, 110);
    glVertex2i(v + 60, 120);
    glVertex2i(v + 50, 120);
    glVertex2i(v + 20, 140);
    glVertex2i(v + 20, 130);
    glEnd();
    // car wheel 1
    glColor3f(rgb(92), rgb(141), rgb(148));
    glBegin(GL_TRIANGLE_FAN);
    glVertex2f(v + 10, 100); // circle er center position
    for (int i = 0; i <= 100; i++) {
        float angle = 2.0f * 3.1416f * i / 100;
        float x = 5 * cosf(angle); // value ta radius
        float y = 5 * sinf(angle);  // value ta radius
        glVertex2f(x + v + 10, y + 100); // .. + circle er center position
    }
    glEnd();
    // car wheel 2
    glColor3f(rgb(92), rgb(141), rgb(148));
    glBegin(GL_TRIANGLE_FAN);
    glVertex2f(v + 40, 100); // circle er center position
    for (int i = 0; i <= 100; i++) {
        float angle = 2.0f * 3.1416f * i / 100;
        float x = 5 * cosf(angle); // value ta radius
        float y = 5 * sinf(angle);  // value ta radius
        glVertex2f(x + v + 40, y + 100); // .. + circle er center position
    }
    glEnd();



    glutSwapBuffers();
}
void DrawMixedCloud(float x, float y)
{
        // First Circle
    glColor3f(0.5f, 1.0f, 1.0f);
    glBegin(GL_TRIANGLE_FAN);
    glVertex2f(x, y);
    for (int i = 0; i <= 100; i++) {
        float angle = 2.0f * 3.1416f * i / 100;
        float radius = 20.0f; // Fixed radius
        float cloudX = radius * cosf(angle);
        float cloudY = radius * sinf(angle);
        glVertex2f(cloudX + x, cloudY + y);
    }
    glEnd();

    // Second Circle
    glColor3f(0.5f, 1.0f, 1.0f);
    glBegin(GL_TRIANGLE_FAN);
    glVertex2f(x + 30, y + 10); // Adjusted position for overlap
    for (int i = 0; i <= 100; i++) {
        float angle = 2.0f * 3.1416f * i / 100;
        float radius = 25.0f; // Fixed radius
        float cloudX = radius * cosf(angle);
        float cloudY = radius * sinf(angle);
        glVertex2f(cloudX + x + 30, cloudY + y + 10);
    }
    glEnd();

    // Third Circle
    glColor3f(0.5f, 1.0f, 1.0f);
    glBegin(GL_TRIANGLE_FAN);
    glVertex2f(x + 60, y); // Adjusted position for overlap
    for (int i = 0; i <= 100; i++) {
        float angle = 2.0f * 3.1416f * i / 100;
        float radius = 20.0f; // Fixed radius
        float cloudX = radius * cosf(angle);
        float cloudY = radius * sinf(angle);
        glVertex2f(cloudX + x + 60, cloudY + y);
    }
    glEnd();
}


int main(int argc, char** argv) {
    glutInit(&argc, argv);
    sndPlaySound("1.wav",SND_ASYNC);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);
    glutInitWindowPosition(0, 0);
    glutInitWindowSize(2000,1000);
    glutCreateWindow("Airport Project");
    init();
    glutDisplayFunc(Draw);
    glutMainLoop();
    return 0;
}


